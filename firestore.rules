rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is in a specific family
    function isFamilyMember(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId)).data;
      return request.auth.uid in familyDoc.members;
    }
    
    // Helper function to check if user has familyId in their user document
    function hasFamilyId(familyId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc.familyId == familyId;
    }

    // Helper function to check if a user is a parent in a specific family
    function isFamilyParent(familyId) {
      let familyDoc = get(/databases/$(database)/documents/families/$(familyId)).data;
      return request.auth.uid in familyDoc.members && 
             familyDoc.members[request.auth.uid].role == 'parent';
    }

    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Families collection - the single source of truth for family membership
    match /families/{familyId} {
      // Only members of the family can read it, or users who have this familyId in their user document
      allow read: if isFamilyMember(familyId) || hasFamilyId(familyId);
      
      // Allow creation if the user is the creator (createdBy field matches user ID)
      // and the user is included in the members map as a parent
      allow create: if request.auth != null && 
                       request.auth.uid == resource.data.createdBy &&
                       request.auth.uid in resource.data.members &&
                       resource.data.members[request.auth.uid].role == 'parent';
      
      // Allow updates/deletes only if user is a parent in the family
      allow update, delete: if isFamilyParent(familyId);
    }

    // Locations collection - children can write their own location, family members can read
    match /locations/{childId} {
      // A child can only write to their own location document
      allow write: if request.auth != null && request.auth.uid == childId;
      
      // Allow any authenticated user to read locations (temporarily permissive for debugging)
      allow read: if request.auth != null;
    }

    // Geofences collection - family members can read/write geofences
    match /geofences/{geofenceId} {
      // Any member of the family can read geofences
      allow read: if isFamilyMember(resource.data.familyId) || hasFamilyId(resource.data.familyId);
      
      // Any member of the family can write geofences (check request data for new documents)
      // Use fallback to hasFamilyId in case family document access fails
      allow write: if isFamilyMember(request.resource.data.familyId) || hasFamilyId(request.resource.data.familyId);
    }

    // Geofence events collection - children can write events, family members can read
    match /geofence_events/{eventId} {
      // A child can write geofence events for themselves
      // Use request.resource.data for new documents, resource.data for existing ones
      allow write: if request.auth != null && 
                      (request.resource.data.childId == request.auth.uid || 
                       resource.data.childId == request.auth.uid);
      
      // Any member of the same family can read geofence events
      allow read: if isFamilyMember(resource.data.familyId) || hasFamilyId(resource.data.familyId);
    }

    // Invitations collection - secure handling via Cloud Functions only
    // No direct client access is allowed to prevent abuse
    match /invitations/{inviteCode} {
      allow read, write: if false; // Disallow all client access
    }

    // Legacy collections - keeping for backward compatibility during migration
    // These will be removed once migration is complete
    
    // Parent-child relationships collection - deprecated, use families instead
    match /parent_child_invitations/{invitationId} {
      // Disable all access to encourage migration to new system
      allow read, write: if false;
    }
  }
}