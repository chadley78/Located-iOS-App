rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow children to update parent documents when accepting invitations
      // This is needed for the acceptInvitation flow
      allow update: if request.auth != null && 
        request.auth.uid != userId && // Not updating own document
        request.resource.data.keys().hasAll(['children']) && // Only updating children array
        request.resource.data.children.hasAll(request.auth.uid); // Adding self to children array
    }
    
    // Locations collection - children can write their own location, parents can read their children's locations
    match /locations/{childId} {
      // A child can only update their own location
      allow write: if request.auth != null && request.auth.uid == childId;
      
      // A parent can read the location if their ID is in the child's 'parents' list
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/users/$(childId)).data.parents;
    }
    
    // Geofences collection - parents can create/manage geofences for their children
    match /geofences/{geofenceId} {
      // Allow read/write if the user is authenticated and is a parent of the child
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.childId)).data.parents;
    }
    
    // Geofence events collection - children can write events, parents can read events for their children
    match /geofence_events/{eventId} {
      // A child can write geofence events for themselves
      allow write: if request.auth != null && request.auth.uid == resource.data.childId;
      
      // A parent can read geofence events if they are a parent of the child
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.childId)).data.parents;
    }
    
    // Parent-child relationships collection - for managing invitations
    match /parent_child_invitations/{invitationId} {
      // Parents can create invitations
      allow create: if request.auth != null && request.auth.uid == request.resource.data.parentId;
      
      // Parents can read invitations they created
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.parentId;
      
      // Children can read invitations sent to their email
      allow read: if request.auth != null && 
        request.auth.token.email == resource.data.childEmail;
      
      // Children can update invitations (accept/decline)
      allow update: if request.auth != null && 
        request.auth.token.email == resource.data.childEmail;
    }
  }
}
